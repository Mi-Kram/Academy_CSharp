//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Main.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DB_Context : DbContext
    {
        public DB_Context()
            : base("name=DB_Context")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<authors> authors { get; set; }
        public virtual DbSet<employee> employee { get; set; }
        public virtual DbSet<jobs> jobs { get; set; }
        public virtual DbSet<pub_info> pub_info { get; set; }
        public virtual DbSet<publishers> publishers { get; set; }
        public virtual DbSet<stores> stores { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<titleauthor> titleauthor { get; set; }
        public virtual DbSet<titles> titles { get; set; }
        public virtual DbSet<discounts> discounts { get; set; }
        public virtual DbSet<roysched> roysched { get; set; }
        public virtual DbSet<ShowAuthorsBooks> ShowAuthorsBooks { get; set; }
        public virtual DbSet<titleview> titleview { get; set; }
    
        [DbFunction("DB_Context", "ShowTitles")]
        public virtual IQueryable<ShowTitles_Result> ShowTitles(string type)
        {
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ShowTitles_Result>("[DB_Context].[ShowTitles](@type)", typeParameter);
        }
    
        [DbFunction("DB_Context", "TitlePrice")]
        public virtual IQueryable<TitlePrice_Result> TitlePrice(string type, Nullable<decimal> priceMin, Nullable<decimal> priceMax)
        {
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var priceMinParameter = priceMin.HasValue ?
                new ObjectParameter("priceMin", priceMin) :
                new ObjectParameter("priceMin", typeof(decimal));
    
            var priceMaxParameter = priceMax.HasValue ?
                new ObjectParameter("priceMax", priceMax) :
                new ObjectParameter("priceMax", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<TitlePrice_Result>("[DB_Context].[TitlePrice](@type, @priceMin, @priceMax)", typeParameter, priceMinParameter, priceMaxParameter);
        }
    
        [DbFunction("DB_Context", "TitlesByPubs")]
        public virtual IQueryable<TitlesByPubs_Result> TitlesByPubs(string pubname)
        {
            var pubnameParameter = pubname != null ?
                new ObjectParameter("pubname", pubname) :
                new ObjectParameter("pubname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<TitlesByPubs_Result>("[DB_Context].[TitlesByPubs](@pubname)", pubnameParameter);
        }
    
        public virtual int add_pb(string pubid, string pubname, string city, string state, string country)
        {
            var pubidParameter = pubid != null ?
                new ObjectParameter("pubid", pubid) :
                new ObjectParameter("pubid", typeof(string));
    
            var pubnameParameter = pubname != null ?
                new ObjectParameter("pubname", pubname) :
                new ObjectParameter("pubname", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("add_pb", pubidParameter, pubnameParameter, cityParameter, stateParameter, countryParameter);
        }
    
        public virtual ObjectResult<string> byroyalty(Nullable<int> percentage)
        {
            var percentageParameter = percentage.HasValue ?
                new ObjectParameter("percentage", percentage) :
                new ObjectParameter("percentage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("byroyalty", percentageParameter);
        }
    
        public virtual int get_minmax(string type, ObjectParameter min, ObjectParameter max)
        {
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("get_minmax", typeParameter, min, max);
        }
    
        public virtual ObjectResult<print_au_Result> print_au(string st)
        {
            var stParameter = st != null ?
                new ObjectParameter("st", st) :
                new ObjectParameter("st", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<print_au_Result>("print_au", stParameter);
        }
    
        public virtual int print_pub(string pubn)
        {
            var pubnParameter = pubn != null ?
                new ObjectParameter("pubn", pubn) :
                new ObjectParameter("pubn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("print_pub", pubnParameter);
        }
    
        public virtual ObjectResult<reptq1_Result> reptq1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<reptq1_Result>("reptq1");
        }
    
        public virtual ObjectResult<reptq2_Result> reptq2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<reptq2_Result>("reptq2");
        }
    
        public virtual ObjectResult<reptq3_Result> reptq3(Nullable<decimal> lolimit, Nullable<decimal> hilimit, string type)
        {
            var lolimitParameter = lolimit.HasValue ?
                new ObjectParameter("lolimit", lolimit) :
                new ObjectParameter("lolimit", typeof(decimal));
    
            var hilimitParameter = hilimit.HasValue ?
                new ObjectParameter("hilimit", hilimit) :
                new ObjectParameter("hilimit", typeof(decimal));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<reptq3_Result>("reptq3", lolimitParameter, hilimitParameter, typeParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
