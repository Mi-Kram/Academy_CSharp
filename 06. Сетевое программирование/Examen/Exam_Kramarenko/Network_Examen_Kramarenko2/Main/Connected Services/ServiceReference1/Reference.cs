//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Main.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FolderData", Namespace="http://schemas.datacontract.org/2004/07/Server")]
    [System.SerializableAttribute()]
    public partial class FolderData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] FilesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] FoldersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Files {
            get {
                return this.FilesField;
            }
            set {
                if ((object.ReferenceEquals(this.FilesField, value) != true)) {
                    this.FilesField = value;
                    this.RaisePropertyChanged("Files");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Folders {
            get {
                return this.FoldersField;
            }
            set {
                if ((object.ReferenceEquals(this.FoldersField, value) != true)) {
                    this.FoldersField = value;
                    this.RaisePropertyChanged("Folders");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1", CallbackContract=typeof(Main.ServiceReference1.IService1Callback))]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Register", ReplyAction="http://tempuri.org/IService1/RegisterResponse")]
        bool Register(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Register", ReplyAction="http://tempuri.org/IService1/RegisterResponse")]
        System.Threading.Tasks.Task<bool> RegisterAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/LogIn", ReplyAction="http://tempuri.org/IService1/LogInResponse")]
        bool LogIn([System.ServiceModel.MessageParameterAttribute(Name="login")] string login1, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/LogIn", ReplyAction="http://tempuri.org/IService1/LogInResponse")]
        System.Threading.Tasks.Task<bool> LogInAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        Main.ServiceReference1.FolderData GetData(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<Main.ServiceReference1.FolderData> GetDataAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateFolder", ReplyAction="http://tempuri.org/IService1/CreateFolderResponse")]
        bool CreateFolder(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateFolder", ReplyAction="http://tempuri.org/IService1/CreateFolderResponse")]
        System.Threading.Tasks.Task<bool> CreateFolderAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveFolder", ReplyAction="http://tempuri.org/IService1/RemoveFolderResponse")]
        bool RemoveFolder(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveFolder", ReplyAction="http://tempuri.org/IService1/RemoveFolderResponse")]
        System.Threading.Tasks.Task<bool> RemoveFolderAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveFile", ReplyAction="http://tempuri.org/IService1/RemoveFileResponse")]
        bool RemoveFile(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveFile", ReplyAction="http://tempuri.org/IService1/RemoveFileResponse")]
        System.Threading.Tasks.Task<bool> RemoveFileAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CopyFile", ReplyAction="http://tempuri.org/IService1/CopyFileResponse")]
        bool CopyFile(string key, byte[] data, bool isEnd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CopyFile", ReplyAction="http://tempuri.org/IService1/CopyFileResponse")]
        System.Threading.Tasks.Task<bool> CopyFileAsync(string key, byte[] data, bool isEnd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFile", ReplyAction="http://tempuri.org/IService1/GetFileResponse")]
        bool GetFile(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFile", ReplyAction="http://tempuri.org/IService1/GetFileResponse")]
        System.Threading.Tasks.Task<bool> GetFileAsync(string path);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Callback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFilePart", ReplyAction="http://tempuri.org/IService1/GetFilePartResponse")]
        void GetFilePart(string path, byte[] arr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetCloseStream", ReplyAction="http://tempuri.org/IService1/SetCloseStreamResponse")]
        void SetCloseStream(string path);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Main.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.DuplexClientBase<Main.ServiceReference1.IService1>, Main.ServiceReference1.IService1 {
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool Register(string login, string password) {
            return base.Channel.Register(login, password);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterAsync(string login, string password) {
            return base.Channel.RegisterAsync(login, password);
        }
        
        public bool LogIn(string login1, string password) {
            return base.Channel.LogIn(login1, password);
        }
        
        public System.Threading.Tasks.Task<bool> LogInAsync(string login, string password) {
            return base.Channel.LogInAsync(login, password);
        }
        
        public Main.ServiceReference1.FolderData GetData(string path) {
            return base.Channel.GetData(path);
        }
        
        public System.Threading.Tasks.Task<Main.ServiceReference1.FolderData> GetDataAsync(string path) {
            return base.Channel.GetDataAsync(path);
        }
        
        public bool CreateFolder(string path) {
            return base.Channel.CreateFolder(path);
        }
        
        public System.Threading.Tasks.Task<bool> CreateFolderAsync(string path) {
            return base.Channel.CreateFolderAsync(path);
        }
        
        public bool RemoveFolder(string path) {
            return base.Channel.RemoveFolder(path);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveFolderAsync(string path) {
            return base.Channel.RemoveFolderAsync(path);
        }
        
        public bool RemoveFile(string path) {
            return base.Channel.RemoveFile(path);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveFileAsync(string path) {
            return base.Channel.RemoveFileAsync(path);
        }
        
        public bool CopyFile(string key, byte[] data, bool isEnd) {
            return base.Channel.CopyFile(key, data, isEnd);
        }
        
        public System.Threading.Tasks.Task<bool> CopyFileAsync(string key, byte[] data, bool isEnd) {
            return base.Channel.CopyFileAsync(key, data, isEnd);
        }
        
        public bool GetFile(string path) {
            return base.Channel.GetFile(path);
        }
        
        public System.Threading.Tasks.Task<bool> GetFileAsync(string path) {
            return base.Channel.GetFileAsync(path);
        }
    }
}
